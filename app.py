# -*- coding: utf-8 -*-
"""FlakskRiskRate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qR36mXu1L685s5PT4a2PnCJLYYaewtjl
"""

from flask import Flask, request, jsonify
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import openpyxl

app = Flask(__name__)

@app.route('/')
def home():
    return "Hello, Render!"

if __name__ == "__app__":
    app.run()

# Define the function to process data
def process_data():
    file_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRnH-_FyYUJ5NCF_HHQjT1JhCGl7MsMxRlsRWVib3wi7P78LHuDgkLk2RwjlcuXNQ/pub?output=csv"

    try:
        df = pd.read_csv(file_url)
    except Exception as e:
        return {"error": f"Error loading CSV: {e}"}

    # Select only required columns
    columns_to_extract = ['LicenseStatus', 'ActivityMainGroup', 'MainActivity', 'Street', 'Region', 'LastApplicationNo', 'Numberofrenewals']
    df = df[columns_to_extract]

    # Labeling logic
    def label_row(row):
        if row['Numberofrenewals'] >= 3 and row['LicenseStatus'] in ['Active', 'Expired']:
            return 'high success'
        elif row['Numberofrenewals'] < 3 and row['LicenseStatus'] in ['Active', 'Expired']:
            return 'low success'
        elif row['Numberofrenewals'] >= 3 and row['LicenseStatus'] in ['Canceled', 'Totally Blocked', 'Managerially Canceled', 'Mortgaged', 'Partially Blocked', 'Suspended']:
            return 'good cancel'
        elif row['Numberofrenewals'] < 3 and row['LicenseStatus'] in ['Canceled', 'Totally Blocked', 'Managerially Canceled', 'Mortgaged', 'Partially Blocked', 'Suspended']:
            return 'bad cancel'
        elif row['LicenseStatus'] == 'Inactive':
            return 'new'
        else:
            return 'other'

    df['label'] = df.apply(label_row, axis=1)

    # Convert categorical variables to numerical
    clustering_columns = ['MainActivity', 'Region']
    df_cluster = df[clustering_columns].copy()
    label_encoders = {}

    for col in clustering_columns:
        le = LabelEncoder()
        df_cluster[col] = le.fit_transform(df_cluster[col])
        label_encoders[col] = le

    df_cluster['Cluster'] = df_cluster.groupby('MainActivity').ngroup()
    df['Cluster'] = df_cluster['Cluster']

    # Risk scoring
    label_values = {'high success': 4, 'low success': 3, 'good cancel': 2, 'bad cancel': 1, 'new': 0}
    risk_df = df.groupby(['MainActivity', 'Region', 'label']).size().unstack(fill_value=0)

    for label in label_values.keys():
        if label not in risk_df.columns:
            risk_df[label] = 0

    risk_df['RiskRate'] = (1 - ((
        risk_df['high success'] * 4 +
        risk_df['low success'] * 3 +
        risk_df['good cancel'] * 2 +
        risk_df['bad cancel'] * 1 +
        risk_df['new'] * 0
    ) / (100 * 4))) * 100

    df = df.merge(risk_df[['RiskRate']], on=['MainActivity', 'Region'], how='left')
    df_clean = df.dropna()

    # Convert DataFrame to JSON
    return df_clean[['MainActivity', 'Region', 'RiskRate']].to_dict(orient='records')

@app.route('/process', methods=['GET'])
def get_data():
    result = process_data()
    return jsonify(result)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
